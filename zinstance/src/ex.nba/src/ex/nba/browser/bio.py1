"""
    Demo of the widget
"""
from five import grok

from zope.interface import Interface
from zope import schema

from z3c.form import field, button
from z3c.form.interfaces import DISPLAY_MODE, HIDDEN_MODE

from plone.directives import form

from collective.z3cform.datagridfield import DataGridFieldFactory
from collective.z3cform.datagridfield import DictRow


class IPlant(Interface):
    plant_type = schema.TextLine(
        title = u'Plant Type', required=True)
    local_name = schema.TextLine(
        title = u'Local Name', required=True)
    scientific_name = schema.TextLine(
        title = u'Scientific Name', required=True)
    habit = schema.TextLine(
        title = u'Habit', required=True)
    habitat = schema.TextLine(
        title = u'Habitat', required=True)
    local_status = schema.Choice(
        title = u'Local Status', required=True,
         values=[u'Past', u'Present'])
    use = schema.TextLine(
        title = u'Commercial / Own use', required=True)
    part = schema.TextLine(
        title = u'Part Collected', required=True)
    tk = schema.TextLine(
        title=u'Associated TK', required=True)
    other = schema.TextLine(
        title=u'other', required=True)
    knowledge = schema.TextLine(
        title = u'community knowledge holder', required=True)


# Note: when using a dict, it is still an object - A schema.Dict would be
#       expected to contain some schemas. We are using an object implemented
#       as a dict

class IPlantdetails(Interface):
#    name = schema.TextLine(title=u'Name', required=True)
    plant = schema.List(title=u'Plants, shrubs ....',
        value_type=DictRow(title=u'plant', schema=IPlant),
        required=True)

TESTDATA = {
    'name': 'MY NAME',
    'plant': [
           {'plant_type': 'acacia',
            'local_name': 'curry leaf',
            'scientific_name': 'acacia indica',
            'habit': 'fertile land',
            'habitat': 'plains',
	    'local_status': 'Present',
            'use': 'Commercial',
            'part': 'leaf',
            'tk': 'tk',
            'other': 'nil',
            'knowledge': 'no' 
		}
           ]}

class EditForm(form.EditForm):
    label = u'Simple Form'

    grok.context(Interface)
    grok.name('bio')

    fields = field.Fields(IPlantdetails)
    fields['plant'].widgetFactory = DataGridFieldFactory

    def getContent(self):
        return TESTDATA

    @button.buttonAndHandler(u'Save', name='save')
    def handleSave(self, action):

        data, errors = self.extractData()
        if errors:
            self.status = self.formErrorsMessage
            return

       
        changes=self.applyChanges(data)
        self.context.plone_log("changes",changes)
        if changes:
            self.status = "changes saves"
        else:
            self.status = "No Changes"
        context = self.getContent()
        for k, v in data.items():
            context[k] = v


#        self.context['Plantdata'].invokeFactory('plantdata', **data)

    def updateActions(self):
        """Bypass the baseclass editform - it causes problems"""
        super(form.EditForm, self).updateActions()

